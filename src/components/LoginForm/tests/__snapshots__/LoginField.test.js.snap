// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginField
    glyph="user"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <FormGroup
        bsClass="form-group"
        className="LoginForm-group"
>
        <ControlLabel
                bsClass="control-label"
                className="LoginField-label"
                srOnly={false}
        />
        <InputGroup
                bsClass="input-group"
        >
                <InputGroupAddon
                        bsClass="input-group-addon"
                >
                        <Glyphicon
                                bsClass="glyphicon"
                                glyph="user"
                        />
                </InputGroupAddon>
                <DefaultConnectedControlText
                        className="LoginField-input form-control "
                        model={undefined}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="text"
                        validateOn="change"
                        validators={
                                Object {
                                        "validEmail": [Function],
                                        "validateNotEmpty": [Function],
                                      }
                        }
                />
        </InputGroup>
        <Modeled(Connect(Errors))
                className="LoginField-error-message"
                messages={
                        Object {
                                "validEmail": "ungültige E-Mail-Adresse",
                                "validateNotEmpty": "muss ausgefüllt werden",
                              }
                }
                model={undefined}
                show={false}
        />
</FormGroup>,
      "className": "LoginField field",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "bsClass": "form-group",
        "children": Array [
          <ControlLabel
            bsClass="control-label"
            className="LoginField-label"
            srOnly={false}
/>,
          <InputGroup
            bsClass="input-group"
>
            <InputGroupAddon
                        bsClass="input-group-addon"
            >
                        <Glyphicon
                                    bsClass="glyphicon"
                                    glyph="user"
                        />
            </InputGroupAddon>
            <DefaultConnectedControlText
                        className="LoginField-input form-control "
                        model={undefined}
                        onChange={[Function]}
                        onFocus={[Function]}
                        type="text"
                        validateOn="change"
                        validators={
                                    Object {
                                                "validEmail": [Function],
                                                "validateNotEmpty": [Function],
                                              }
                        }
            />
</InputGroup>,
          <Modeled(Connect(Errors))
            className="LoginField-error-message"
            messages={
                        Object {
                                    "validEmail": "ungültige E-Mail-Adresse",
                                    "validateNotEmpty": "muss ausgefüllt werden",
                                  }
            }
            model={undefined}
            show={false}
/>,
        ],
        "className": "LoginForm-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "control-label",
            "children": undefined,
            "className": "LoginField-label",
            "srOnly": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "bsClass": "input-group",
            "children": Array [
              <InputGroupAddon
                bsClass="input-group-addon"
>
                <Glyphicon
                                bsClass="glyphicon"
                                glyph="user"
                />
</InputGroupAddon>,
              <DefaultConnectedControlText
                className="LoginField-input form-control "
                model={undefined}
                onChange={[Function]}
                onFocus={[Function]}
                type="text"
                validateOn="change"
                validators={
                                Object {
                                                "validEmail": [Function],
                                                "validateNotEmpty": [Function],
                                              }
                }
/>,
              undefined,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bsClass": "input-group-addon",
                "children": <Glyphicon
                  bsClass="glyphicon"
                  glyph="user"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "glyphicon",
                  "glyph": "user",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "LoginField-input form-control ",
                "model": undefined,
                "onChange": [Function],
                "onFocus": [Function],
                "type": "text",
                "validateOn": "change",
                "validators": Object {
                  "validEmail": [Function],
                  "validateNotEmpty": [Function],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            undefined,
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "LoginField-error-message",
            "messages": Object {
              "validEmail": "ungültige E-Mail-Adresse",
              "validateNotEmpty": "muss ausgefüllt werden",
            },
            "model": undefined,
            "show": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <FormGroup
          bsClass="form-group"
          className="LoginForm-group"
>
          <ControlLabel
                    bsClass="control-label"
                    className="LoginField-label"
                    srOnly={false}
          />
          <InputGroup
                    bsClass="input-group"
          >
                    <InputGroupAddon
                              bsClass="input-group-addon"
                    >
                              <Glyphicon
                                        bsClass="glyphicon"
                                        glyph="user"
                              />
                    </InputGroupAddon>
                    <DefaultConnectedControlText
                              className="LoginField-input form-control "
                              model={undefined}
                              onChange={[Function]}
                              onFocus={[Function]}
                              type="text"
                              validateOn="change"
                              validators={
                                        Object {
                                                  "validEmail": [Function],
                                                  "validateNotEmpty": [Function],
                                                }
                              }
                    />
          </InputGroup>
          <Modeled(Connect(Errors))
                    className="LoginField-error-message"
                    messages={
                              Object {
                                        "validEmail": "ungültige E-Mail-Adresse",
                                        "validateNotEmpty": "muss ausgefüllt werden",
                                      }
                    }
                    model={undefined}
                    show={false}
          />
</FormGroup>,
        "className": "LoginField field",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "bsClass": "form-group",
          "children": Array [
            <ControlLabel
              bsClass="control-label"
              className="LoginField-label"
              srOnly={false}
/>,
            <InputGroup
              bsClass="input-group"
>
              <InputGroupAddon
                            bsClass="input-group-addon"
              >
                            <Glyphicon
                                          bsClass="glyphicon"
                                          glyph="user"
                            />
              </InputGroupAddon>
              <DefaultConnectedControlText
                            className="LoginField-input form-control "
                            model={undefined}
                            onChange={[Function]}
                            onFocus={[Function]}
                            type="text"
                            validateOn="change"
                            validators={
                                          Object {
                                                        "validEmail": [Function],
                                                        "validateNotEmpty": [Function],
                                                      }
                            }
              />
</InputGroup>,
            <Modeled(Connect(Errors))
              className="LoginField-error-message"
              messages={
                            Object {
                                          "validEmail": "ungültige E-Mail-Adresse",
                                          "validateNotEmpty": "muss ausgefüllt werden",
                                        }
              }
              model={undefined}
              show={false}
/>,
          ],
          "className": "LoginForm-group",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "control-label",
              "children": undefined,
              "className": "LoginField-label",
              "srOnly": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bsClass": "input-group",
              "children": Array [
                <InputGroupAddon
                  bsClass="input-group-addon"
>
                  <Glyphicon
                                    bsClass="glyphicon"
                                    glyph="user"
                  />
</InputGroupAddon>,
                <DefaultConnectedControlText
                  className="LoginField-input form-control "
                  model={undefined}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="text"
                  validateOn="change"
                  validators={
                                    Object {
                                                      "validEmail": [Function],
                                                      "validateNotEmpty": [Function],
                                                    }
                  }
/>,
                undefined,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "bsClass": "input-group-addon",
                  "children": <Glyphicon
                    bsClass="glyphicon"
                    glyph="user"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "bsClass": "glyphicon",
                    "glyph": "user",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "LoginField-input form-control ",
                  "model": undefined,
                  "onChange": [Function],
                  "onFocus": [Function],
                  "type": "text",
                  "validateOn": "change",
                  "validators": Object {
                    "validEmail": [Function],
                    "validateNotEmpty": [Function],
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              undefined,
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "LoginField-error-message",
              "messages": Object {
                "validEmail": "ungültige E-Mail-Adresse",
                "validateNotEmpty": "muss ausgefüllt werden",
              },
              "model": undefined,
              "show": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
